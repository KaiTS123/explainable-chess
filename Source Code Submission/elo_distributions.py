# -*- coding: utf-8 -*-
"""Elo_distributions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zvunXprQGhf5_KJWYKbT1x1DDkRzOBbt
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm, binom
plt.rcParams.update({'font.size': 12})

NUM_MATCHES = [20, 10, 10, 10, 10, 10]
ELOS = [1500, 1700, 1900]
SCORES = [[17.5, 11, 1],
          [9.5, 2.5, 0],
          [7, 6.5, 0.5],
          [5.5, 3.5, 0],
          [3.5, 0, 0],
          [1.5, 0.5, 0]]

labels = ["All optimisations with all features and tapered eval",
          "All optimisations with all features",
          "All optimisations with all features except mobility",
          "All optimisations with material and piece-position",
          "All optimisations with material only",
          "All optimisations except quiescence search"]
los = []
his = []
mles = []

plt.figure(figsize=(9,6))
for i, scores in enumerate(SCORES):
    x = np.arange(0, 3000)
    win_probs = [norm.cdf(x, elo, 200*np.sqrt(2)) for elo in ELOS]
    log_score_probs = np.array([binom.logpmf(2*scores[j], 2*NUM_MATCHES[i], win_probs[j]) for j in range(len(scores))])
    log_score_prob = np.sum(log_score_probs, axis=0)
    score_prob = np.exp(log_score_prob)
    cum_score_prob = np.cumsum(score_prob)
    score_prob = score_prob/cum_score_prob[-1]
    cum_score_prob = cum_score_prob/cum_score_prob[-1]
    mle = np.argmax(score_prob)
    mles.append(mle)
    lo = np.argmin(np.absolute(cum_score_prob-0.05))
    los.append(mle-lo)
    hi = np.argmin(np.absolute(cum_score_prob-0.95))
    his.append(hi-mle)
    print(scores, mle, lo, hi)
    plt.plot(x[1000:2000], score_prob[1000:2000])

plt.xlabel('Elo')
plt.ylabel('Probability')
plt.title('Graph showing the probability distribution of the Elo rating of different versions of the chess engine')
plt.legend(labels, loc='upper center', bbox_to_anchor=(0.5, 1.4))
plt.show()

plt.grid(axis='x')
plt.barh(labels, mles)
plt.errorbar(mles, range(len(labels)), xerr=[los, his], fmt='none', capsize=5, linestyle='None', color='black')
plt.xlabel('Elo')
plt.savefig("estimated_elos.pdf", format="pdf", bbox_inches="tight")

plt.show()

NUM_MATCHES = 20
ELOS = [1500, 1700, 1900]
scores = [17.5, 11, 0.5]

plt.figure(figsize=(9,6))
x = np.arange(0, 3000)
win_probs = [norm.cdf(x, elo, 200*np.sqrt(2)) for elo in ELOS]
for prob in win_probs:
    plt.plot(x[1000:3000], prob[1000:3000])
plt.xlabel('Elo')
plt.ylabel('Likelihood')
plt.legend(ELOS, loc='best')
plt.savefig("expected_result_elo.pdf", format="pdf", bbox_inches="tight")
plt.show()

log_score_probs = np.array([binom.logpmf(2*scores[i], 2*NUM_MATCHES, win_probs[i]) for i in range(len(scores))])
score_probs = [np.exp(prob) for prob in log_score_probs]
for prob in score_probs:
    cum_prob = np.cumsum(prob)
    prob = prob/cum_prob[-1]
    cum_prob = cum_prob/cum_prob[-1]
    plt.plot(x[1200:2000], prob[1200:2000])

plt.xlabel('Elo')
plt.ylabel('Likelihood')
plt.legend(ELOS, loc='best')
plt.grid()
plt.savefig("result_probabilities.pdf", format="pdf", bbox_inches="tight")
plt.show()

log_score_prob = np.sum(log_score_probs, axis=0)
score_prob = np.exp(log_score_prob)
cum_score_prob = np.cumsum(score_prob)
score_prob = score_prob/cum_score_prob[-1]
cum_score_prob = cum_score_prob/cum_score_prob[-1]
mle = np.argmax(score_prob)
mles.append(mle)
lo = np.argmin(np.absolute(cum_score_prob-0.05))
los.append(mle-lo)
hi = np.argmin(np.absolute(cum_score_prob-0.95))
his.append(hi-mle)
print(scores, mle, lo, hi)
plt.plot(x[1200:2000], score_prob[1200:2000])
plt.axvline(x=mle, linestyle='--', color='k', linewidth=1)
plt.axvline(x=lo, linestyle='--', color='k', linewidth=1)
plt.axvline(x=hi, linestyle='--', color='k', linewidth=1)

plt.xlabel('Elo')
plt.ylabel('Likelihood')
plt.grid()
plt.savefig("elo_distribution.pdf", format="pdf", bbox_inches="tight")
plt.show()

plt.grid(axis='x')
plt.barh(labels, [74, 63, 63, 62, 58, 54])
plt.xlabel('Accuracy (%)')

plt.savefig("accuracies.pdf", format="pdf", bbox_inches="tight")
plt.show()

from google.colab import drive
drive.mount('/content/drive')

node_depths = {0: 1, 1: 18, 2: 102, 3: 323, 4: 294, 5: 655, 6: 1038, 7: 2158, 8: 2426, 9: 2373, 10: 2424, 11: 1211, 12: 881, 13: 267, 14: 107, 15: 15, 16: 9, 17: 7}

depths = node_depths.keys()
nodes = node_depths.values()
print(np.sum(list(nodes)))
plt.plot(depths, nodes, label="Pawn captures removed")

node_depths = {0: 1, 1: 24, 2: 192, 3: 760, 4: 2132, 5: 3115, 6: 1414, 7: 3230, 8: 2748, 9: 12261, 10: 7453, 11: 26177, 12: 14245, 13: 37135, 14: 20415, 15: 38915, 16: 25193, 17: 35705, 18: 27026, 19: 29083, 20: 22357, 21: 19850, 22: 12858, 23: 8127, 24: 3842, 25: 817}
depths = node_depths.keys()
nodes = node_depths.values()
print(np.sum(list(nodes)))
plt.plot(depths, nodes, label="All promotions and captures")

plt.xticks(range(0, 26, 2))
plt.xlabel("Depth")
plt.ylabel("Nodes")
plt.legend(loc="upper left")
plt.grid()
plt.savefig("node_depths.pdf", format="pdf", bbox_inches="tight")
plt.show()

labels = ["Alpha-beta pruning and iterative deepening",
         "Alpha-beta pruning only",
         "No alpha-beta pruning"]

Y_axis = np.arange(len(labels))
plt.grid(axis="x")
plt.barh(Y_axis-0.2, [2447, 5292, 413880], 0.4, label="Main search nodes")
plt.barh(Y_axis+0.2, [79522, 430036, 0], 0.4, label="Quiescent search nodes")
plt.xlabel('Nodes')
plt.yticks(Y_axis, labels)
plt.legend(loc="best")
plt.xscale("log")

plt.savefig("search_nodes.pdf", format="pdf", bbox_inches="tight")
plt.show()